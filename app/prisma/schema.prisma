generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Notification {
  id             String  @id
  icon_path      String?
  icon_color     String?
  theme          String
  text           String
  sub_text       String?
  linger_time    Int
  needs_clearing Boolean
  auto_open      Boolean
  issuer         String
  identifier     String?

  @@map("notifications")
}

model Profile {
  id                String        @id
  email             String?
  amazon_acct       String?
  first_name        String?
  last_name         String?
  description       String?
  profile_image_url String?
  last_sync         Int?
  added_date        Int
  locale_code       String
  auto_sync         Boolean
  activation_bytes  String?
  books             Book[]
  profileImage      ProfileImage?

  @@map("accounts")
}

model ProfileImage {
  profile      Profile @relation(fields: [id], references: [id], onDelete: Cascade)
  id           String  @unique
  content_type String
  full         Bytes
  i512         Bytes
  i256         Bytes
  i128         Bytes
  i56          Bytes

  @@map("images")
}

model Author {
  name    String  @id
  plexKey String?
  books   Book[]

  @@map("authors")
}

model Narrator {
  name  String @id
  books Book[]

  @@map("narrators")
}

model Genre {
  tag   String @id
  books Book[]

  @@map("genres")
}

model Series {
  id      String  @id
  title   String
  plexKey String?
  books   Book[]

  @@map("series")
}

model Book {
  asin               String     @id
  google_api_id      String?
  profiles           Profile[]
  title              String
  subtitle           String?
  authors            Author[]
  plexKey            String?
  narrators          Narrator[]
  series             Series?    @relation(fields: [seriesId], references: [id])
  series_sequence    Int?
  genres             Genre[]
  runtime_length_min Int?
  rating             Decimal
  num_ratings        Int
  release_date       BigInt
  description        String?
  search_description String?
  isbn               String?
  purchase_date      BigInt
  seriesId           String?

  downloaded   Boolean
  processed    Boolean
  cover        Cover?
  branding     Branding?
  chapters     Chapter[]
  media        Media[]
  ProcessQueue ProcessBook?

  @@map("books")
}

model Cover {
  asin           String   @id
  book           Book     @relation(fields: [asin], references: [asin], onDelete: Cascade)
  url_50         String
  url_100        String
  url_500        String
  url_1000       String
  hex_dom        String?
  hex_dom_bright Boolean?
  hex_sim        String?
  hex_sim_bright Boolean?
  hex_sqr        String?
  hex_sqr_bright Boolean?
  url_isbn       String?
  url_isbn_s     String?

  @@map("covers")
}

// Things like PDFs and other files associated with a book
// NOTE: Risk of de-sync if this entry gets deleted and the file does not
model Media {
  id           String  @id
  book         Book    @relation(fields: [bookAsin], references: [asin], onDelete: Cascade)
  bookAsin     String
  data         Bytes?
  is_file      Boolean
  path         String?
  content_type String
  description  String?
  extension    String
  title        String
  size_b       BigInt

  @@map("media")
}

model Branding {
  asin              String @id
  book              Book   @relation(fields: [asin], references: [asin], onDelete: Cascade)
  intro_duration_ms Int
  outro_duration_ms Int

  @@map("branding")
}

model Chapter {
  id              String @id
  book            Book   @relation(fields: [bookAsin], references: [asin], onDelete: Cascade)
  bookAsin        String
  sequence        Int
  title           String
  length_ms       Int
  start_offset_ms Int

  @@map("chapters")
}

model ProcessQueue {
  id             String  @id
  in_progress    Boolean @default(false)
  is_done        Boolean @default(false)
  result         String?
  try_after_time BigInt?
  type           String  @default("BOOK")

  book        ProcessBook?

  @@map("processQueue")
}

model ProcessBook {
  id                String       @id
  book              Book         @relation(fields: [bookAsin], references: [asin], onDelete: Cascade)
  bookAsin          String       @unique
  download_progress Float        @default(0)
  process_progress  Float        @default(0)
  downloaded_mb     Float?
  total_mb          Float?
  speed             Float?
  queueEntry        ProcessQueue @relation(fields: [id], references: [id], onDelete: Cascade)

  @@map("processBook")
}

model Progress {
  id   String
  type String

  ref    String
  status String

  progress      Float
  downloaded_mb Float?
  total_mb      Float?
  speed_mb_s    Float?

  message String

  @@id([id, type])
  @@map("progress")
}

model Settings {
  setting String @id
  value   String

  @@map("settings")
}
